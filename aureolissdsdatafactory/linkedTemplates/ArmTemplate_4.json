{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "aureolissdsdatafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Omakotitalo_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Read data from Omakotitalohinnat -file and load the data to SQL table.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OKThinnat2015",
								"type": "DatasetReference"
							},
							"name": "Omakotitalohinnat2015"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Omakotitalojen_hinnat_2015_2018_SQL",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "omakotitalo_currated",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Select4"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tAluejako as string,\n\t\t{2015 Neliöhinta (EUR/m2)} as short,\n\t\t{2015 Keskipinta-ala m2} as double,\n\t\t{2015 Kauppojen lukumäärä} as short,\n\t\t{2016 Neliöhinta (EUR/m2)} as short,\n\t\t{2016 Keskipinta-ala m2} as double,\n\t\t{2016 Kauppojen lukumäärä} as short,\n\t\t{2017 Neliöhinta (EUR/m2)} as short,\n\t\t{2017 Keskipinta-ala m2} as double,\n\t\t{2017 Kauppojen lukumäärä} as short,\n\t\t{2018 Neliöhinta (EUR/m2)} as short,\n\t\t{2018 Keskipinta-ala m2} as double,\n\t\t{2018 Kauppojen lukumäärä} as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Omakotitalohinnat2015\nOmakotitalohinnat2015 select(skipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select4\nSelect4 derive(Paivitetty_pvm = currentUTC('GMT-3')) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tAluejako as string,\n\t\tNeliohinta_2015 as decimal(20,2),\n\t\tKeskipinta_ala_2015 as decimal(20,2),\n\t\tKauppojen_lukumaara_2015 as integer,\n\t\tNeliohinta_2016 as decimal(20,2),\n\t\tKeskipinta_ala_2016 as decimal(20,2),\n\t\tKauppojen_lukumaara_2016 as integer,\n\t\tNeliohinta_2017 as decimal(20,2),\n\t\tKeskipinta_ala_2017 as decimal(20,2),\n\t\tKauppojen_lukumaara_2017 as integer,\n\t\tNeliohinta_2018 as decimal(20,2),\n\t\tKeskipinta_ala_2018 as decimal(20,2),\n\t\tKauppojen_lukumaara_2018 as integer,\n\t\tPaivitetty_pvm as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sink1\nSelect4 sink(input(\n\t\tAluejako as string,\n\t\tNeliohinta_2015 as string,\n\t\tKeskipinta_ala_2015 as string,\n\t\tKauppojen_lukumaara_2015 as string,\n\t\tNeliohinta_2016 as string,\n\t\tKeskipinta_ala_2016 as string,\n\t\tKauppojen_lukumaara_2016 as string,\n\t\tNeliohinta_2017 as string,\n\t\tKeskipinta_ala_2017 as string,\n\t\tKauppojen_lukumaara_2017 as string,\n\t\tNeliohinta_2018 as string,\n\t\tKeskipinta_ala_2018 as string,\n\t\tKauppojen_lukumaara_2018 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tpartitionFileNames:['omakoti_curated'],\n\tpartitionBy('hash', 1)) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Osakeasunto_Unpivot_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vuokrahinnat_2010_2018_BU",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Osakeasuntojen_hinnat_out",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Unpivot1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Pivot1"
						},
						{
							"name": "Select2"
						}
					],
					"script": "source(output(\n\t\tPostinumero as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\tNeliohinta_2015 as decimal(20,2),\n\t\tKauppojen_lukumaara_2015 as decimal(20,2),\n\t\tNeliohinta_2016 as decimal(20,2),\n\t\tKauppojen_lukumaara_2016 as decimal(20,2),\n\t\tNeliohinta_2017 as decimal(20,2),\n\t\tKauppojen_lukumaara_2017 as decimal(20,2),\n\t\tNeliohinta_2018 as decimal(20,2),\n\t\tKauppojen_lukumaara_2018 as decimal(20,2),\n\t\tNeliohinta_2010 as decimal(20,2),\n\t\tKauppojen_lukumaara_2010 as decimal(20,2),\n\t\tNeliohinta_2011 as decimal(20,2),\n\t\tKauppojen_lukumaara_2011 as decimal(20,2),\n\t\tNeliohinta_2012 as decimal(20,2),\n\t\tKauppojen_lukumaara_2012 as decimal(20,2),\n\t\tNeliohinta_2013 as decimal(20,2),\n\t\tKauppojen_lukumaara_2013 as decimal(20,2),\n\t\tNeliohinta_2014 as decimal(20,2),\n\t\tKauppojen_lukumaara_2014 as decimal(20,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [Postinumero] as [Postinumero]\\n      ,[Talotyyppi] as [Talotyyppi]\\n      ,[Rakennusvuosi] as [Rakennusvuosi]\\n      ,CAST([Neliohinta_2015] as decimal(20,2)) as  [Neliohinta_2015]\\n      ,CAST([Kauppojen_lukumaara_2015] as decimal(20,2)) as [Kauppojen_lukumaara_2015]\\n      ,CAST([Neliohinta_2016] as decimal(20,2)) as [Neliohinta_2016]\\n      ,CAST([Kauppojen_lukumaara_2016]as decimal(20,2)) as [Kauppojen_lukumaara_2016]\\n      ,CAST([Neliohinta_2017] as decimal(20,2)) as [Neliohinta_2017]\\n      ,CAST([Kauppojen_lukumaara_2017]as decimal(20,2)) as [Kauppojen_lukumaara_2017]\\n      ,CAST([Neliohinta_2018] as decimal(20,2)) as [Neliohinta_2018]\\n      ,CAST([Kauppojen_lukumaara_2018]as decimal(20,2)) as [Kauppojen_lukumaara_2018]\\n      ,CAST([Neliohinta_2010] as decimal(20,2)) as [Neliohinta_2010]\\n      ,CAST([Kauppojen_lukumaara_2010]as decimal(20,2)) as [Kauppojen_lukumaara_2010]\\n      ,CAST([Neliohinta_2011] as decimal(20,2)) as [Neliohinta_2011]\\n      ,CAST([Kauppojen_lukumaara_2011]as decimal(20,2)) as [Kauppojen_lukumaara_2011]\\n      ,CAST([Neliohinta_2012] as decimal(20,2)) as [Neliohinta_2012]\\n      ,CAST([Kauppojen_lukumaara_2012]as decimal(20,2)) as [Kauppojen_lukumaara_2012]\\n      ,CAST([Neliohinta_2013] as decimal(20,2)) as [Neliohinta_2013]\\n      ,CAST([Kauppojen_lukumaara_2013]as decimal(20,2)) as [Kauppojen_lukumaara_2013]\\n      ,CAST([Neliohinta_2014] as decimal(20,2)) as [Neliohinta_2014]\\n      ,CAST([Kauppojen_lukumaara_2014]as decimal(20,2)) as [Kauppojen_lukumaara_2014]\\n  FROM [dbo].[Osakeasuntojen_hinnat_2010_2018_BU]',\n\tformat: 'query') ~> source1\nsource1 select(mapColumn(\n\t\tPostinumero,\n\t\tTalotyyppi,\n\t\tRakennusvuosi,\n\t\tNeliohinta_2015,\n\t\tKauppojen_lukumaara_2015,\n\t\tNeliohinta_2016,\n\t\tKauppojen_lukumaara_2016,\n\t\tNeliohinta_2017,\n\t\tKauppojen_lukumaara_2017,\n\t\tNeliohinta_2018,\n\t\tKauppojen_lukumaara_2018,\n\t\tNeliohinta_2010,\n\t\tKauppojen_lukumaara_2010,\n\t\tNeliohinta_2011,\n\t\tKauppojen_lukumaara_2011,\n\t\tNeliohinta_2012,\n\t\tKauppojen_lukumaara_2012,\n\t\tNeliohinta_2013,\n\t\tKauppojen_lukumaara_2013,\n\t\tNeliohinta_2014,\n\t\tKauppojen_lukumaara_2014\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nSelect1 unpivot(output(\n\t\tSuure as string,\n\t\tMaara as decimal(20,2)\n\t),\n\tungroupBy(Postinumero,\n\t\tTalotyyppi,\n\t\tRakennusvuosi),\n\tlateral: false,\n\tignoreNullPivots: false) ~> Unpivot1\nUnpivot1 derive(Vuosi = right(Suure, 4),\n\t\tSuure = left(Suure,(length(Suure)-5))) ~> DerivedColumn1\nDerivedColumn1 pivot(groupBy(Postinumero,\n\t\tTalotyyppi,\n\t\tRakennusvuosi,\n\t\tVuosi),\n\tpivotBy(Suure),\n\teka = first(Maara),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> Pivot1\nPivot1 select(mapColumn(\n\t\tPostinumero,\n\t\tTalotyyppi,\n\t\tRakennusvuosi,\n\t\tVuosi,\n\t\teach(match(name=='Kauppojen_lukumaaraeka'),\n\t\t\t'Kauppojan_lukumaara' = $$),\n\t\teach(match(name=='Neliohintaeka'),\n\t\t\t'Neliohinta' = $$)\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nSelect2 sink(input(\n\t\tPostinumero as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\tVuosi as string,\n\t\tKauppojen_lukumaara as decimal(20,2),\n\t\tNeliohinta as decimal(20,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Osakeasunto_ennusteet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pandas",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Alueet_UP",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Osakeasunto_ennusteet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Osakeasuntojen_hinnat_2010_2018_UP",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tProp_0 as string,\n\t\tPostinumero as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\tVuosi as string,\n\t\tNeliohinta as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource(output(\n\t\tPostinro as string,\n\t\t{Postinumeroalueen nimi} as string,\n\t\tKuntakoodi as string,\n\t\t{Kunnan nimi} as string,\n\t\tKuntaryhmakoodi as string,\n\t\t{Kuntaryhman nimi} as string,\n\t\tSeutukuntakoodi as string,\n\t\t{Seutukunnan nimi} as string,\n\t\tMaakuntakoodi as string,\n\t\t{Maakunnan nimi} as string,\n\t\tSuuraluekoodi as string,\n\t\t{Suuralueen nimi} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source2\nsource2 select(mapColumn(\n\t\tPostinro,\n\t\tPostinumeroalueen_nimi = {Postinumeroalueen nimi},\n\t\tKunnan_nimi = {Kunnan nimi}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nsource1 select(mapColumn(\n\t\tPostinumero,\n\t\tTalotyyppi,\n\t\tRakennusvuosi,\n\t\tVuosi,\n\t\tNeliohinta\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nSelect2, Select1 join(Postinumero == Postinro,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join1\nJoin1 select(mapColumn(\n\t\tPostinumero,\n\t\tAlue = Postinumeroalueen_nimi,\n\t\tKaupunki = Kunnan_nimi,\n\t\tTalotyyppi,\n\t\tRakennusvuosi,\n\t\tVuosi,\n\t\tNeliohinta\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select3\nSelect3 derive(Ennuste = 'Y',\n\t\tPaivitetty_pvm = currentUTC('GMT-2')) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tPostinumero as string,\n\t\tAlue as string,\n\t\tKaupunki as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\tVuosi as integer,\n\t\tNeliohinta as decimal(20,2),\n\t\tKauppojen_lukumaara as integer,\n\t\tEnnuste as string,\n\t\tPaivitetty_pvm as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tPostinumero,\n\t\tAlue,\n\t\tKaupunki,\n\t\tTalotyyppi,\n\t\tRakennusvuosi,\n\t\tVuosi,\n\t\tNeliohinta,\n\t\tEnnuste,\n\t\tPaivitetty_pvm\n\t)) ~> sink1\nDerivedColumn1 sink(input(\n\t\tPostinumero as string,\n\t\tAlue as string,\n\t\tKaupunki as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\tVuosi as integer,\n\t\tNeliohinta as decimal(20,2),\n\t\tKauppojen_lukumaara as integer,\n\t\tEnnuste as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Osakeasunto_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Read osakeasunto data from two files and join them together. Source files separated as they did not fit into one from Tilastokeskus. DerivedColumn2 has derivation for Postinumero, Alue and Kaupunki using Data Factory functions.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Osakeasunnot_2015_2018_csv",
								"type": "DatasetReference"
							},
							"name": "Osakeaasuntohinnat2015"
						},
						{
							"dataset": {
								"referenceName": "Osakeasuntohinnat2010",
								"type": "DatasetReference"
							},
							"name": "Osakeasuntohinnat2010"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Osakeasuntojen_hinnat_2010_2018",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "Osakeasunto_currated",
								"type": "DatasetReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "Select2"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select7"
						}
					],
					"script": "source(output(\n\t\tPostinumero as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\t{2015 Neliöhinta (EUR/m2)} as short,\n\t\t{2015 Kauppojen lukumäärä} as short,\n\t\t{2016 Neliöhinta (EUR/m2)} as short,\n\t\t{2016 Kauppojen lukumäärä} as short,\n\t\t{2017 Neliöhinta (EUR/m2)} as short,\n\t\t{2017 Kauppojen lukumäärä} as short,\n\t\t{2018 Neliöhinta (EUR/m2)} as short,\n\t\t{2018 Kauppojen lukumäärä} as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100) ~> Osakeaasuntohinnat2015\nsource(output(\n\t\tPostinumero as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\t{2010 Neliöhinta (EUR/m2)} as short,\n\t\t{2010 Kauppojen lukumäärä} as short,\n\t\t{2011 Neliöhinta (EUR/m2)} as short,\n\t\t{2011 Kauppojen lukumäärä} as short,\n\t\t{2012 Neliöhinta (EUR/m2)} as short,\n\t\t{2012 Kauppojen lukumäärä} as short,\n\t\t{2013 Neliöhinta (EUR/m2)} as short,\n\t\t{2013 Kauppojen lukumäärä} as short,\n\t\t{2014 Neliöhinta (EUR/m2)} as short,\n\t\t{2014 Kauppojen lukumäärä} as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100) ~> Osakeasuntohinnat2010\nOsakeaasuntohinnat2015 select(skipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nSelect2 derive(Postinumero = substring(Postinumero, 1, 5),\n\t\tAlue = trim(substring(Postinumero, instr(Postinumero, ' '), instr(Postinumero, '(') - instr(Postinumero, ' '))),\n\t\tKaupunki = trim(substring(Postinumero, instr(Postinumero, '('), 50),' ())'),\n\t\tPaivitetty_pvm = currentUTC('GMT-3')) ~> DerivedColumn2\nOsakeasuntohinnat2010 select(skipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select3\nDerivedColumn2, Select3 join(DerivedColumn2@Postinumero == substring(Select3@Postinumero, 1, 5)\n\t&& Select2@Talotyyppi == Select3@Talotyyppi\n\t&& Select2@Rakennusvuosi == Select3@Rakennusvuosi,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\nJoin1 select(mapColumn(\n\t\tPostinumero = DerivedColumn2@Postinumero,\n\t\tAlue,\n\t\tKaupunki,\n\t\tTalotyyppi = Select2@Talotyyppi,\n\t\tRakennusvuosi = Select2@Rakennusvuosi,\n\t\tNeliohinta_2010 = {2010 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2010 = {2010 Kauppojen lukumäärä},\n\t\tNeliohinta_2011 = {2011 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2011 = {2011 Kauppojen lukumäärä},\n\t\tNeliohinta_2012 = {2012 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2012 = {2012 Kauppojen lukumäärä},\n\t\tNeliohinta_2013 = {2013 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2013 = {2013 Kauppojen lukumäärä},\n\t\tNeliohinta_2014 = {2014 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2014 = {2014 Kauppojen lukumäärä},\n\t\tNeliohinta_2015 = {2015 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2015 = {2015 Kauppojen lukumäärä},\n\t\tNeliohinta_2016 = {2016 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2016 = {2016 Kauppojen lukumäärä},\n\t\tNeliohinta_2017 = {2017 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2017 = {2017 Kauppojen lukumäärä},\n\t\tNeliohinta_2018 = {2018 Neliöhinta (EUR/m2)},\n\t\tKauppojen_lukumaara_2018 = {2018 Kauppojen lukumäärä},\n\t\tPaivitetty_pvm\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> Select7\nSelect7 sink(input(\n\t\tPostinumero as string,\n\t\tAlue as string,\n\t\tKaupunki as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\tNeliohinta_2010 as decimal(20,2),\n\t\tKauppojen_lukumaara_2010 as integer,\n\t\tNeliohinta_2011 as decimal(20,2),\n\t\tKauppojen_lukumaara_2011 as integer,\n\t\tNeliohinta_2012 as decimal(20,2),\n\t\tKauppojen_lukumaara_2012 as integer,\n\t\tNeliohinta_2013 as decimal(20,2),\n\t\tKauppojen_lukumaara_2013 as integer,\n\t\tNeliohinta_2014 as decimal(20,2),\n\t\tKauppojen_lukumaara_2014 as integer,\n\t\tNeliohinta_2015 as decimal(20,2),\n\t\tKauppojen_lukumaara_2015 as integer,\n\t\tNeliohinta_2016 as decimal(20,2),\n\t\tKauppojen_lukumaara_2016 as integer,\n\t\tNeliohinta_2017 as decimal(20,2),\n\t\tKauppojen_lukumaara_2017 as integer,\n\t\tNeliohinta_2018 as decimal(20,2),\n\t\tKauppojen_lukumaara_2018 as integer,\n\t\tPaivitetty_pvm as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table') ~> sink4\nSelect7 sink(input(\n\t\tPostinumero as string,\n\t\tTalotyyppi as string,\n\t\tRakennusvuosi as string,\n\t\tAlue as string,\n\t\tKaupunki as string,\n\t\tNeliohinta_2010 as string,\n\t\tKauppojen_lukumaara_2010 as string,\n\t\tNeliohinta_2011 as string,\n\t\tKauppojen_lukumaara_2011 as string,\n\t\tNeliohinta_2012 as string,\n\t\tKauppojen_lukumaara_2012 as string,\n\t\tNeliohinta_2013 as string,\n\t\tKauppojen_lukumaara_2013 as string,\n\t\tNeliohinta_2014 as string,\n\t\tKauppojen_lukumaara_2014 as string,\n\t\tNeliohinta_2015 as string,\n\t\tKauppojen_lukumaara_2015 as string,\n\t\tNeliohinta_2016 as string,\n\t\tKauppojen_lukumaara_2016 as string,\n\t\tNeliohinta_2017 as string,\n\t\tKauppojen_lukumaara_2017 as string,\n\t\tNeliohinta_2018 as string,\n\t\tKauppojen_lukumaara_2018 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tpartitionFileNames:['osakeasunto_curated'],\n\tpartitionBy('hash', 1)) ~> sink5"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PDF_read_testing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demo_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PDF_read",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipLines: 1) ~> source1\nsource1 select(mapColumn(\n\t\tColumn_1,\n\t\tColumn_2,\n\t\tColumn_3,\n\t\tColumn_4,\n\t\tColumn_5,\n\t\tColumn_6,\n\t\tColumn_7,\n\t\tColumn_8,\n\t\tColumn_9,\n\t\tColumn_10,\n\t\tColumn_11,\n\t\tColumn_12,\n\t\tColumn_13,\n\t\tColumn_14,\n\t\tColumn_15,\n\t\tColumn_16,\n\t\tColumn_17,\n\t\tColumn_18,\n\t\tColumn_19,\n\t\tColumn_20,\n\t\tColumn_21,\n\t\tColumn_22,\n\t\tColumn_23,\n\t\tColumn_24,\n\t\tColumn_25,\n\t\tColumn_26\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nSelect1 sink(input(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaajamaAste_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TaajamaAste_kunnittain",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TaajamaAste_SQL",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tVuosi as short,\n\t\tAlue as string,\n\t\t{Väestö 31.12.} as integer,\n\t\t{Taajama-aste, %} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 derive(Kunta = substring(Alue,5),\n\t\tKuntakoodi = substring(Alue, 1, 3)) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tVuosi as integer,\n\t\tAlue as string,\n\t\t{Väestö 31.12.} as integer,\n\t\t{Taajama-aste, %} as double,\n\t\tKunta as string,\n\t\tKuntakoodi as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tVuosi,\n\t\t{Väestö 31.12.},\n\t\t{Taajama-aste, %},\n\t\tKunta,\n\t\tKuntakoodi\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vuokra_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Read data from Vuokra file, derive Vuosi -column and load the data to SQL table. \n\nAP: Vuokrat vuositasolle + AVG arvot",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Vuokra_csv",
								"type": "DatasetReference"
							},
							"name": "Vuokrahinnat2015"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vuokra_curated",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "vuokra",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tVuosineljannes as string,\n\t\tAlue as string,\n\t\tHuoneluku as string,\n\t\tRahoitusmuoto as string,\n\t\tLukumaara as string,\n\t\tNeliovuokra as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 17137,\n\tdateFormats: ['dd/MM/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'float') ~> Vuokrahinnat2015\nVuokrahinnat2015 select(skipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nSelect1 derive(Vuosi = toInteger(substring(Vuosineljannes, 1, 4)),\n\t\tPaivitetty_pvm = currentUTC('GMT-2'),\n\t\tLukumaara_int = toInteger(Lukumaara),\n\t\tNeliovuokra_dbl = toDouble(Neliovuokra)) ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(Vuosi,\n\t\tAlue,\n\t\tHuoneluku,\n\t\tRahoitusmuoto),\n\tLukumaara = avg(Lukumaara_int),\n\t\tNeliovuokra = avg(Neliovuokra_dbl),\n\t\tPaivitetty_pvm = max(Paivitetty_pvm)) ~> Aggregate1\nAggregate1 sink(input(\n\t\tVuosineljannes as string,\n\t\tVuosi as string,\n\t\tAlue as string,\n\t\tHuoneluku as string,\n\t\tRahoitusmuoto as string,\n\t\tLukumaara as string,\n\t\tNeliovuokra as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['vuokra_curated'],\n\tpartitionBy('hash', 1)) ~> sink2\nAggregate1 sink(input(\n\t\tVuosineljannes as string,\n\t\tAlue as string,\n\t\tHuoneluku as string,\n\t\tRahoitusmuoto as string,\n\t\tLukumaara as string,\n\t\tNeliovuokra as string,\n\t\tVuosi as integer,\n\t\tPaivitetty_pvm as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table') ~> sink3"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vuokra_flow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Read data from Vuokra file, derive Vuosi -column and load the data to SQL table. \n\nAP: Vuokrat vuositasolle + AVG arvot",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Vuokra_csv_2",
								"type": "DatasetReference"
							},
							"name": "Vuokrahinnat2015"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vuokra_curated",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "vuokra",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Vuosineljännes} as string,\n\t\tAlue as string,\n\t\tHuoneluku as string,\n\t\tRahoitusmuoto as string,\n\t\tTiedot as string,\n\t\tvalue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100000,\n\tdateFormats: ['dd/MM/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'float') ~> Vuokrahinnat2015\nVuokrahinnat2015 select(skipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nSelect1 derive(Vuosi = toInteger(substring({Vuosineljännes}, 1, 4)),\n\t\tPaivitetty_pvm = currentUTC('GMT-3'),\n\t\tLukumaara_int = toInteger(iif(Tiedot=='Lukumäärä', value, '0')),\n\t\tNeliovuokra_dbl = toDouble(iif(Tiedot=='Neliövuokra', value, '0'))) ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(Vuosi,\n\t\tAlue,\n\t\tHuoneluku,\n\t\tRahoitusmuoto),\n\tLukumaara = avg(Lukumaara_int),\n\t\tNeliovuokra = avg(Neliovuokra_dbl),\n\t\tPaivitetty_pvm = max(Paivitetty_pvm)) ~> Aggregate1\nAggregate1 sink(input(\n\t\tVuosineljannes as string,\n\t\tVuosi as string,\n\t\tAlue as string,\n\t\tHuoneluku as string,\n\t\tRahoitusmuoto as string,\n\t\tLukumaara as string,\n\t\tNeliovuokra as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['vuokra_curated'],\n\tpartitionBy('hash', 1)) ~> sink2\nAggregate1 sink(input(\n\t\tVuosineljannes as string,\n\t\tAlue as string,\n\t\tHuoneluku as string,\n\t\tRahoitusmuoto as string,\n\t\tLukumaara as string,\n\t\tNeliovuokra as string,\n\t\tVuosi as integer,\n\t\tPaivitetty_pvm as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table') ~> sink3"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tyopaikka_proj_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tp_tilasto_proj_nopea",
								"type": "DatasetReference"
							},
							"name": "projnopea"
						},
						{
							"dataset": {
								"referenceName": "tp_tilasto_proj_perus",
								"type": "DatasetReference"
							},
							"name": "projperus"
						},
						{
							"dataset": {
								"referenceName": "tp_tilasto_proj_hidas",
								"type": "DatasetReference"
							},
							"name": "projhidas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Tyopaikka_proj_hidas",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Tyopaikka_proj_nopea",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "Tyopaikka_proj_perus",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "Unpivot1"
						},
						{
							"name": "Unpivot2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Unpivot3"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Unpivot4"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Unpivot5"
						},
						{
							"name": "Select8"
						},
						{
							"name": "Unpivot6"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Select9"
						}
					],
					"script": "source(output(\n\t\tToimiala as string,\n\t\tTol as short,\n\t\tTyyppi as string,\n\t\tVuosi as short,\n\t\tUusimaa as integer,\n\t\tHel as integer,\n\t\tEsp as integer,\n\t\tVan as integer,\n\t\tKau as integer,\n\t\tPKS as integer,\n\t\tHyv as integer,\n\t\tJar as integer,\n\t\tKer as integer,\n\t\tKir as integer,\n\t\tMan as integer,\n\t\tNur as integer,\n\t\tPor as integer,\n\t\tSip as integer,\n\t\tTuu as integer,\n\t\tVih as integer,\n\t\tKehys as integer,\n\t\tRaas as integer,\n\t\tLohj as integer,\n\t\tLovi as integer,\n\t\tPorv as integer,\n\t\tRiih as integer,\n\t\tUusimaa_p as string,\n\t\tHel_p as string,\n\t\tEsp_p as string,\n\t\tVan_p as string,\n\t\tKau_p as string,\n\t\tPKS_p as string,\n\t\tHyv_p as string,\n\t\tJar_p as string,\n\t\tKer_p as string,\n\t\tKir_p as string,\n\t\tMan_p as string,\n\t\tNur_p as string,\n\t\tPor_p as string,\n\t\tSip_p as string,\n\t\tTuu_p as string,\n\t\tVih_p as string,\n\t\tKehys_p as string,\n\t\tRaas_p as string,\n\t\tLohj_p as string,\n\t\tLovi_p as string,\n\t\tPorv_p as string,\n\t\tRiih_p as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> projnopea\nsource(output(\n\t\tToimiala as string,\n\t\tTol as short,\n\t\tTyyppi as string,\n\t\tVuosi as short,\n\t\tUusimaa as integer,\n\t\tHel as integer,\n\t\tEsp as integer,\n\t\tVan as integer,\n\t\tKau as integer,\n\t\tPKS as integer,\n\t\tHyv as integer,\n\t\tJar as integer,\n\t\tKer as integer,\n\t\tKir as integer,\n\t\tMan as integer,\n\t\tNur as integer,\n\t\tPor as integer,\n\t\tSip as integer,\n\t\tTuu as integer,\n\t\tVih as integer,\n\t\tKehys as integer,\n\t\tRaas as integer,\n\t\tLohj as integer,\n\t\tLovi as integer,\n\t\tPorv as integer,\n\t\tRiih as integer,\n\t\tUusimaa_p as string,\n\t\tHel_p as string,\n\t\tEsp_p as string,\n\t\tVan_p as string,\n\t\tKau_p as string,\n\t\tPKS_p as string,\n\t\tHyv_p as string,\n\t\tJar_p as string,\n\t\tKer_p as string,\n\t\tKir_p as string,\n\t\tMan_p as string,\n\t\tNur_p as string,\n\t\tPor_p as string,\n\t\tSip_p as string,\n\t\tTuu_p as string,\n\t\tVih_p as string,\n\t\tKehys_p as string,\n\t\tRaas_p as string,\n\t\tLohj_p as string,\n\t\tLovi_p as string,\n\t\tPorv_p as string,\n\t\tRiih_p as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> projperus\nsource(output(\n\t\tToimiala as string,\n\t\tTol as short,\n\t\tTyyppi as string,\n\t\tVuosi as short,\n\t\tUusimaa as integer,\n\t\tHel as integer,\n\t\tEsp as integer,\n\t\tVan as integer,\n\t\tKau as integer,\n\t\tPKS as integer,\n\t\tHyv as integer,\n\t\tJar as integer,\n\t\tKer as integer,\n\t\tKir as integer,\n\t\tMan as integer,\n\t\tNur as integer,\n\t\tPor as integer,\n\t\tSip as integer,\n\t\tTuu as integer,\n\t\tVih as integer,\n\t\tKehys as integer,\n\t\tRaas as integer,\n\t\tLohj as integer,\n\t\tLovi as integer,\n\t\tPorv as integer,\n\t\tRiih as integer,\n\t\tUusimaa_p as string,\n\t\tHel_p as string,\n\t\tEsp_p as string,\n\t\tVan_p as string,\n\t\tKau_p as string,\n\t\tPKS_p as string,\n\t\tHyv_p as string,\n\t\tJar_p as string,\n\t\tKer_p as string,\n\t\tKir_p as string,\n\t\tMan_p as string,\n\t\tNur_p as string,\n\t\tPor_p as string,\n\t\tSip_p as string,\n\t\tTuu_p as string,\n\t\tVih_p as string,\n\t\tKehys_p as string,\n\t\tRaas_p as string,\n\t\tLohj_p as string,\n\t\tLovi_p as string,\n\t\tPorv_p as string,\n\t\tRiih_p as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> projhidas\nSelect1 unpivot(output(\n\t\tAlue as string,\n\t\tArvo as integer\n\t),\n\tungroupBy(Toimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi),\n\tlateral: false,\n\tignoreNullPivots: true) ~> Unpivot1\nSelect2 unpivot(output(\n\t\tAlue as string,\n\t\tArvoP as string\n\t),\n\tungroupBy(Toimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi),\n\tlateral: false,\n\tignoreNullPivots: true) ~> Unpivot2\nprojhidas select(mapColumn(\n\t\tToimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi,\n\t\tUusimaa,\n\t\tHel,\n\t\tEsp,\n\t\tVan,\n\t\tKau,\n\t\tPKS,\n\t\tHyv,\n\t\tJar,\n\t\tKer,\n\t\tKir,\n\t\tMan,\n\t\tNur,\n\t\tPor,\n\t\tSip,\n\t\tTuu,\n\t\tVih,\n\t\tKehys,\n\t\tRaas,\n\t\tLohj,\n\t\tLovi,\n\t\tPorv,\n\t\tRiih\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nprojhidas select(mapColumn(\n\t\tToimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi,\n\t\tUusimaa_p,\n\t\tHel_p,\n\t\tEsp_p,\n\t\tVan_p,\n\t\tKau_p,\n\t\tPKS_p,\n\t\tHyv_p,\n\t\tJar_p,\n\t\tKer_p,\n\t\tKir_p,\n\t\tMan_p,\n\t\tNur_p,\n\t\tPor_p,\n\t\tSip_p,\n\t\tTuu_p,\n\t\tVih_p,\n\t\tKehys_p,\n\t\tRaas_p,\n\t\tLohj_p,\n\t\tLovi_p,\n\t\tPorv_p,\n\t\tRiih_p\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nUnpivot1, Unpivot2 join(Unpivot1@Toimiala == Unpivot2@Toimiala\n\t&& Unpivot1@Tol == Unpivot2@Tol\n\t&& Unpivot1@Tyyppi == Unpivot2@Tyyppi\n\t&& Unpivot1@Vuosi == Unpivot2@Vuosi\n\t&& substring(Unpivot1@Alue,1,3) == substring(Unpivot2@Alue,1,3),\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\nJoin1 select(mapColumn(\n\t\tToimiala = Unpivot1@Toimiala,\n\t\tTol = Unpivot1@Tol,\n\t\tTyyppi = Unpivot1@Tyyppi,\n\t\tVuosi = Unpivot1@Vuosi,\n\t\tAlue = Unpivot1@Alue,\n\t\tArvo,\n\t\tArvoP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nprojnopea select(mapColumn(\n\t\tToimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi,\n\t\tUusimaa,\n\t\tHel,\n\t\tEsp,\n\t\tVan,\n\t\tKau,\n\t\tPKS,\n\t\tHyv,\n\t\tJar,\n\t\tKer,\n\t\tKir,\n\t\tMan,\n\t\tNur,\n\t\tPor,\n\t\tSip,\n\t\tTuu,\n\t\tVih,\n\t\tKehys,\n\t\tRaas,\n\t\tLohj,\n\t\tLovi,\n\t\tPorv,\n\t\tRiih\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 unpivot(output(\n\t\tAlue as string,\n\t\tArvo as integer\n\t),\n\tungroupBy(Toimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi),\n\tlateral: false,\n\tignoreNullPivots: true) ~> Unpivot3\nprojnopea select(mapColumn(\n\t\tToimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi,\n\t\tUusimaa_p,\n\t\tHel_p,\n\t\tEsp_p,\n\t\tVan_p,\n\t\tKau_p,\n\t\tPKS_p,\n\t\tHyv_p,\n\t\tJar_p,\n\t\tKer_p,\n\t\tKir_p,\n\t\tMan_p,\n\t\tNur_p,\n\t\tPor_p,\n\t\tSip_p,\n\t\tTuu_p,\n\t\tVih_p,\n\t\tKehys_p,\n\t\tRaas_p,\n\t\tLohj_p,\n\t\tLovi_p,\n\t\tPorv_p,\n\t\tRiih_p\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect5 unpivot(output(\n\t\tAlue as string,\n\t\tArvoP as string\n\t),\n\tungroupBy(Toimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi),\n\tlateral: false,\n\tignoreNullPivots: true) ~> Unpivot4\nUnpivot3, Unpivot4 join(Unpivot3@Toimiala == Unpivot4@Toimiala\n\t&& Unpivot3@Tol == Unpivot4@Tol\n\t&& Unpivot3@Tyyppi == Unpivot4@Tyyppi\n\t&& Unpivot3@Vuosi == Unpivot4@Vuosi\n\t&& substring(Unpivot3@Alue,1,3) == substring(Unpivot4@Alue,1,3),\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join2\nJoin2 select(mapColumn(\n\t\tToimiala = Unpivot3@Toimiala,\n\t\tTol = Unpivot3@Tol,\n\t\tTyyppi = Unpivot3@Tyyppi,\n\t\tVuosi = Unpivot3@Vuosi,\n\t\tAlue = Unpivot3@Alue,\n\t\tArvo,\n\t\tArvoP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nprojperus select(mapColumn(\n\t\tToimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi,\n\t\tUusimaa,\n\t\tHel,\n\t\tEsp,\n\t\tVan,\n\t\tKau,\n\t\tPKS,\n\t\tHyv,\n\t\tJar,\n\t\tKer,\n\t\tKir,\n\t\tMan,\n\t\tNur,\n\t\tPor,\n\t\tSip,\n\t\tTuu,\n\t\tVih,\n\t\tKehys,\n\t\tRaas,\n\t\tLohj,\n\t\tLovi,\n\t\tPorv,\n\t\tRiih\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nSelect7 unpivot(output(\n\t\tAlue as string,\n\t\tArvo as integer\n\t),\n\tungroupBy(Toimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi),\n\tlateral: false,\n\tignoreNullPivots: true) ~> Unpivot5\nprojperus select(mapColumn(\n\t\tToimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi,\n\t\tUusimaa_p,\n\t\tHel_p,\n\t\tEsp_p,\n\t\tVan_p,\n\t\tKau_p,\n\t\tPKS_p,\n\t\tHyv_p,\n\t\tJar_p,\n\t\tKer_p,\n\t\tKir_p,\n\t\tMan_p,\n\t\tNur_p,\n\t\tPor_p,\n\t\tSip_p,\n\t\tTuu_p,\n\t\tVih_p,\n\t\tKehys_p,\n\t\tRaas_p,\n\t\tLohj_p,\n\t\tLovi_p,\n\t\tPorv_p,\n\t\tRiih_p\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nSelect8 unpivot(output(\n\t\tAlue as string,\n\t\tArvoP as string\n\t),\n\tungroupBy(Toimiala,\n\t\tTol,\n\t\tTyyppi,\n\t\tVuosi),\n\tlateral: false,\n\tignoreNullPivots: true) ~> Unpivot6\nUnpivot5, Unpivot6 join(Unpivot5@Toimiala == Unpivot6@Toimiala\n\t&& Unpivot5@Tol == Unpivot6@Tol\n\t&& Unpivot5@Tyyppi == Unpivot6@Tyyppi\n\t&& Unpivot5@Vuosi == Unpivot6@Vuosi\n\t&& substring(Unpivot5@Alue,1,3) == substring(Unpivot6@Alue,1,3),\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join3\nJoin3 select(mapColumn(\n\t\tToimiala = Unpivot5@Toimiala,\n\t\tTol = Unpivot5@Tol,\n\t\tTyyppi = Unpivot5@Tyyppi,\n\t\tVuosi = Unpivot5@Vuosi,\n\t\tAlue = Unpivot5@Alue,\n\t\tArvo,\n\t\tArvoP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nSelect3 sink(input(\n\t\tToimiala as string,\n\t\tTol as integer,\n\t\tTyyppi as string,\n\t\tVuosi as integer,\n\t\tAlue as string,\n\t\tArvo as integer,\n\t\tArvoP as decimal(5,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table') ~> sink1\nSelect6 sink(input(\n\t\tToimiala as string,\n\t\tTol as integer,\n\t\tTyyppi as string,\n\t\tVuosi as integer,\n\t\tAlue as string,\n\t\tArvo as integer,\n\t\tArvoP as decimal(5,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table') ~> sink2\nSelect9 sink(input(\n\t\tToimiala as string,\n\t\tTol as integer,\n\t\tTyyppi as string,\n\t\tVuosi as integer,\n\t\tAlue as string,\n\t\tArvo as integer,\n\t\tArvoP as decimal(5,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table') ~> sink3"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:50:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"quoteAllText": true
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BKT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BKT_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BKT_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source2": {},
									"source3": {},
									"source4": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "Share",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SDS_Data_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_TaajamaAste')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_TaajamaAste",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TaajamaAste",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TaajamaAste_kunnittain",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TaajamaAste_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_TaajamaAste",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TaajamaAste_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TaajamaAste_flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demographics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Demographics_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Demographics_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Demograph2016": {},
									"Demograph2015": {},
									"Demograph2014": {},
									"Demograph2013": {},
									"Demograph2012": {},
									"sink5": {},
									"sink6": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ennusteet_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Osakeasunto_ennusteet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Osakeasunto_ennusteet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Osakeasunto_ennusteet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Main_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Starts the Copy Data action and after that starts each of the 6 separate pipelines. ",
				"activities": [
					{
						"name": "Osakeasunto_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Osakeasunto_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Osakeaasuntohinnat2015": {},
									"Osakeasuntohinnat2010": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "BKT_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BKT_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source2": {},
									"source3": {},
									"source4": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Vuokra_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Vuokra_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vuokrahinnat2015": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Demographics_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Demographics_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Demograph2016": {},
									"Demograph2015": {},
									"Demograph2014": {},
									"Demograph2013": {},
									"Demograph2012": {},
									"sink5": {},
									"sink6": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Omakotitalo_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Omakotitalo_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Omakotitalohinnat2015": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "Share",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SDS_Data_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TaajamaAste_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TaajamaAste_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Osakeasunto_Unpivot_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Osakeasunto_flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Osakeasunto_Unpivot_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Osakeasunto_flow')]",
				"[concat(variables('factoryId'), '/dataflows/Vuokra_flow')]",
				"[concat(variables('factoryId'), '/dataflows/Omakotitalo_flow')]",
				"[concat(variables('factoryId'), '/dataflows/TaajamaAste_flow')]",
				"[concat(variables('factoryId'), '/dataflows/Osakeasunto_Unpivot_flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Omakotitalo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Omakotitalo_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Omakotitalo_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Omakotitalohinnat2015": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Omakotitalo_flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Osakeasunto')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Osakeasunto_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Osakeasunto_flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Osakeaasuntohinnat2015": {},
									"Osakeasuntohinnat2010": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Osakeasunto_flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Osakeasunto_ennusteet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ML Batch Execution1",
						"type": "AzureMLBatchExecution",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"webServiceInputs": {
								"input1": {
									"filePath": "realestatedata1/input3.csv",
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"webServiceOutputs": {
								"output1": {
									"filePath": "realestatedata1/output1.csv",
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Osakeasunto_WebService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Osakeasunto_ennusteet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Osakeasunto_ennusteet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Osakeasunto_ennusteet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PDF_testing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PDF_read",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Python1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PDF_read_testing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Python1",
						"type": "DatabricksSparkPython",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pythonFile": "dbfs:/PDF_read.py",
							"parameters": [],
							"libraries": [
								{
									"pypi": {
										"package": "os"
									}
								},
								{
									"pypi": {
										"package": "azure.storage.blob"
									}
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "SDS_DataBricks_North",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PDF_read_testing')]"
			]
		}
	]
}